use crate::{BoolExpr, StringExpr, StringTransform};

grammar;

pub BoolExpr: BoolExpr = {
    <lh:BoolExpr> "&&" <rh:BoolExpr2> => BoolExpr::And(Box::new(lh), Box::new(rh)),
    "!" <expr:BoolExpr2> => BoolExpr::Not(Box::new(expr)),
    <BoolExpr2>,
};

BoolExpr2: BoolExpr = {
    <lh:StringExpr> "==" <rh:StringExpr> => BoolExpr::Eq(lh, rh),
    <lh:StringExpr> "!=" <rh:StringExpr> => BoolExpr::Neq(lh, rh),
};

StringExpr: StringExpr = {
    <t:Field> => StringExpr::Field(t),
    <t:Literal> => StringExpr::Literal(t),
    "lower" "(" <expr:StringExpr> ")" => StringExpr::Transform(StringTransform::LowerCase, Box::new(expr)),
    "upper" "(" <expr:StringExpr> ")" => StringExpr::Transform(StringTransform::UpperCase, Box::new(expr)),
};

Field: String = {
    <r#"([A-Za-z][A-Za-z0-9_]*)"#> => <>.to_string(),
};

Literal: String = {
    <r#""(\\"|[^"])*""#> => <>[1..<>.len()-1].replace(r#"\""#, "\""),
};

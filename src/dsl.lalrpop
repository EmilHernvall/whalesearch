use serde_json::Value;
use crate::{BoolExpr, ValueExpr, StringTransform};

grammar;

pub BoolExpr: BoolExpr = {
    <lh:BoolExpr> "&&" <rh:BoolExpr2> => BoolExpr::And(Box::new(lh), Box::new(rh)),
    <lh:BoolExpr> "||" <rh:BoolExpr2> => BoolExpr::Or(Box::new(lh), Box::new(rh)),
    <BoolExpr2>,
};

BoolExpr2: BoolExpr = {
    <lh:ValueExpr> "==" <rh:ValueExpr> => BoolExpr::Eq(lh, rh),
    <lh:ValueExpr> "!=" <rh:ValueExpr> => BoolExpr::Neq(lh, rh),
    <lh:ValueExpr> "<" <rh:ValueExpr> => BoolExpr::Lt(lh, rh),
    <lh:ValueExpr> ">" <rh:ValueExpr> => BoolExpr::Gt(lh, rh),
};

ValueExpr: ValueExpr = {
    <t:Field> => ValueExpr::Field(t),
    <t:Literal> => ValueExpr::Value(Value::String(t)),
    <t:Number> => ValueExpr::Value(Value::Number(t.into())),
    "lower" "(" <expr:ValueExpr> ")" => ValueExpr::Transform(StringTransform::LowerCase, Box::new(expr)),
    "upper" "(" <expr:ValueExpr> ")" => ValueExpr::Transform(StringTransform::UpperCase, Box::new(expr)),
};

Field: String = {
    <r#"([A-Za-z][A-Za-z0-9_]*)"#> => <>.to_string(),
};

Literal: String = {
    <r#""(\\"|[^"])*""#> => <>[1..<>.len()-1].replace(r#"\""#, "\""),
};

Number: i64 = {
    <r#"([0-9]+)"#> => <>.parse().unwrap(),
};
